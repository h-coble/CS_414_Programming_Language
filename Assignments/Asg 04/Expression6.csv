S0 ,I * ( I + I ) * ( I * ( I + I ) ) $ ,S5: Shift S5 onto stack and continue with next input.
S0 S5 ,* ( I + I ) * ( I * ( I + I ) ) $ ,Reduce by R6: F -> I	Pop 1 from state stack and go to S3. Input remains.
S0 S3 ,* ( I + I ) * ( I * ( I + I ) ) $ ,Reduce by R4: T -> F	Pop 1 from state stack and go to S2. Input remains.
S0 S2 ,* ( I + I ) * ( I * ( I + I ) ) $ ,S7: Shift S7 onto stack and continue with next input.
S0 S2 S7 ,( I + I ) * ( I * ( I + I ) ) $ ,S4: Shift S4 onto stack and continue with next input.
S0 S2 S7 S4 ,I + I ) * ( I * ( I + I ) ) $ ,S5: Shift S5 onto stack and continue with next input.
S0 S2 S7 S4 S5 ,+ I ) * ( I * ( I + I ) ) $ ,Reduce by R6: F -> I	Pop 1 from state stack and go to S3. Input remains.
S0 S2 S7 S4 S3 ,+ I ) * ( I * ( I + I ) ) $ ,Reduce by R4: T -> F	Pop 1 from state stack and go to S2. Input remains.
S0 S2 S7 S4 S2 ,+ I ) * ( I * ( I + I ) ) $ ,Reduce by R2: E -> T	Pop 1 from state stack and go to S8. Input remains.
S0 S2 S7 S4 S8 ,+ I ) * ( I * ( I + I ) ) $ ,S6: Shift S6 onto stack and continue with next input.
S0 S2 S7 S4 S8 S6 ,I ) * ( I * ( I + I ) ) $ ,S5: Shift S5 onto stack and continue with next input.
S0 S2 S7 S4 S8 S6 S5 ,) * ( I * ( I + I ) ) $ ,Reduce by R6: F -> I	Pop 1 from state stack and go to S3. Input remains.
S0 S2 S7 S4 S8 S6 S3 ,) * ( I * ( I + I ) ) $ ,Reduce by R4: T -> F	Pop 1 from state stack and go to S9. Input remains.
S0 S2 S7 S4 S8 S6 S9 ,) * ( I * ( I + I ) ) $ ,Reduce by R1: E -> E + T	Pop 3 from state stack and go to S8. Input remains.
S0 S2 S7 S4 S8 ,) * ( I * ( I + I ) ) $ ,S11: Shift S11 onto stack and continue with next input.
S0 S2 S7 S4 S8 S11 ,* ( I * ( I + I ) ) $ ,Reduce by R5: F -> (E)	Pop 3 from state stack and go to S10. Input remains.
S0 S2 S7 S10 ,* ( I * ( I + I ) ) $ ,Reduce by R3: T -> T * F	Pop 3 from state stack and go to S2. Input remains.
S0 S2 ,* ( I * ( I + I ) ) $ ,S7: Shift S7 onto stack and continue with next input.
S0 S2 S7 ,( I * ( I + I ) ) $ ,S4: Shift S4 onto stack and continue with next input.
S0 S2 S7 S4 ,I * ( I + I ) ) $ ,S5: Shift S5 onto stack and continue with next input.
S0 S2 S7 S4 S5 ,* ( I + I ) ) $ ,Reduce by R6: F -> I	Pop 1 from state stack and go to S3. Input remains.
S0 S2 S7 S4 S3 ,* ( I + I ) ) $ ,Reduce by R4: T -> F	Pop 1 from state stack and go to S2. Input remains.
S0 S2 S7 S4 S2 ,* ( I + I ) ) $ ,S7: Shift S7 onto stack and continue with next input.
S0 S2 S7 S4 S2 S7 ,( I + I ) ) $ ,S4: Shift S4 onto stack and continue with next input.
S0 S2 S7 S4 S2 S7 S4 ,I + I ) ) $ ,S5: Shift S5 onto stack and continue with next input.
S0 S2 S7 S4 S2 S7 S4 S5 ,+ I ) ) $ ,Reduce by R6: F -> I	Pop 1 from state stack and go to S3. Input remains.
S0 S2 S7 S4 S2 S7 S4 S3 ,+ I ) ) $ ,Reduce by R4: T -> F	Pop 1 from state stack and go to S2. Input remains.
S0 S2 S7 S4 S2 S7 S4 S2 ,+ I ) ) $ ,Reduce by R2: E -> T	Pop 1 from state stack and go to S8. Input remains.
S0 S2 S7 S4 S2 S7 S4 S8 ,+ I ) ) $ ,S6: Shift S6 onto stack and continue with next input.
S0 S2 S7 S4 S2 S7 S4 S8 S6 ,I ) ) $ ,S5: Shift S5 onto stack and continue with next input.
S0 S2 S7 S4 S2 S7 S4 S8 S6 S5 ,) ) $ ,Reduce by R6: F -> I	Pop 1 from state stack and go to S3. Input remains.
S0 S2 S7 S4 S2 S7 S4 S8 S6 S3 ,) ) $ ,Reduce by R4: T -> F	Pop 1 from state stack and go to S9. Input remains.
S0 S2 S7 S4 S2 S7 S4 S8 S6 S9 ,) ) $ ,Reduce by R1: E -> E + T	Pop 3 from state stack and go to S8. Input remains.
S0 S2 S7 S4 S2 S7 S4 S8 ,) ) $ ,S11: Shift S11 onto stack and continue with next input.
S0 S2 S7 S4 S2 S7 S4 S8 S11 ,) $ ,Reduce by R5: F -> (E)	Pop 3 from state stack and go to S10. Input remains.
S0 S2 S7 S4 S2 S7 S10 ,) $ ,Reduce by R3: T -> T * F	Pop 3 from state stack and go to S2. Input remains.
S0 S2 S7 S4 S2 ,) $ ,Reduce by R2: E -> T	Pop 1 from state stack and go to S8. Input remains.
S0 S2 S7 S4 S8 ,) $ ,S11: Shift S11 onto stack and continue with next input.
S0 S2 S7 S4 S8 S11 ,$ ,Reduce by R5: F -> (E)	Pop 3 from state stack and go to S10. Input remains.
S0 S2 S7 S10 ,$ ,Reduce by R3: T -> T * F	Pop 3 from state stack and go to S2. Input remains.
S0 S2 ,$ ,Reduce by R2: E -> T	Pop 1 from state stack and go to S1. Input remains.
S0 S1 ,$ ,accept
